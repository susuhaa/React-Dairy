{"ast":null,"code":"var _jsxFileName = \"/Users/soo/Desktop/6\\u110B\\u116F\\u11AF 14\\u110B\\u1175\\u11AF/React_practice/Github/simpledairy/src/DairyEditor.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DairyEditor = () => {\n  _s();\n  const [state, setState] = useState({});\n  const [author, setAuthor] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DairyEditor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC624\\uB298\\uC758 \\uC77C\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"author\",\n        value: author,\n        onChange: e => {\n          console.log(e);\n          setAuthor(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: content,\n        onChange: e => {\n          setContent(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_s(DairyEditor, \"G1RVMualwTIxDH+YlwMWqVabB1w=\");\n_c = DairyEditor;\nexport default DairyEditor;\n\n//input에 사용된 값을 다이어리 에디터가 핸들링 할수 있도록 해야한다.\n// 작성자 저장 autor, setAuthor\n//useState 기능 이용\n//컴포넌트의 이름과 클래스의 이름을 통일하여 css를 사용할때 더 직관적으로 사용한다.\nvar _c;\n$RefreshReg$(_c, \"DairyEditor\");","map":{"version":3,"names":["useState","DairyEditor","state","setState","author","setAuthor","content","setContent","e","console","log","target","value"],"sources":["/Users/soo/Desktop/6월 14일/React_practice/Github/simpledairy/src/DairyEditor.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst DairyEditor = () => {\n\n    const[state, setState] = useState({\n        \n    });\n    const [author, setAuthor] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n\n    return( \n\n    <div className = \"DairyEditor\">\n    <h2>오늘의 일기</h2>\n        <div>\n        <input\n            name =\"author\" \n            value = {author} \n            onChange={(e) => {\n            console.log(e);\n             setAuthor(e.target.value);\n         }}/>\n\n         </div>\n    <div>\n    <textarea \n    value = {content} \n    onChange = {(e) => {\n        setContent(e.target.value);\n    }} />\n</div>\n    </div>\n    );\n};\n\nexport default DairyEditor;\n\n//input에 사용된 값을 다이어리 에디터가 핸들링 할수 있도록 해야한다.\n// 작성자 저장 autor, setAuthor\n//useState 기능 이용\n//컴포넌트의 이름과 클래스의 이름을 통일하여 css를 사용할때 더 직관적으로 사용한다.\n\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAEjC,MAAMC,WAAW,GAAG,MAAM;EAAA;EAEtB,MAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,CAElC,CAAC,CAAC;EACF,MAAM,CAACI,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE1C,oBAEA;IAAK,SAAS,EAAG,aAAa;IAAA,wBAC9B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAe,eACX;MAAA,uBACA;QACI,IAAI,EAAE,QAAQ;QACd,KAAK,EAAII,MAAO;QAChB,QAAQ,EAAGI,CAAC,IAAK;UACjBC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;UACbH,SAAS,CAACG,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC;QAC7B;MAAE;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA,QAEE,eACX;MAAA,uBACA;QACA,KAAK,EAAIN,OAAQ;QACjB,QAAQ,EAAKE,CAAC,IAAK;UACfD,UAAU,CAACC,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC;QAC9B;MAAE;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACH;EAAA;IAAA;IAAA;IAAA;EAAA,QACI;AAEV,CAAC;AAAC,GA/BIX,WAAW;AAAA,KAAXA,WAAW;AAiCjB,eAAeA,WAAW;;AAE1B;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}